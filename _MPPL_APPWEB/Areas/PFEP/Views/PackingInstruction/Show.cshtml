@model MDL_PFEP.ViewModel.PackingInstructionViewModel
@using MDL_PFEP.Model.ELDISY_PFEP;

@{
    ViewBag.ShowRightPanel = 2;
    ViewBag.Title = "Podgląd Instrukcji Pakowania";
}

<div class="row">
    <div id="dialogBox">

    </div>
    @*Widok wydruku*@
    <div class="col-12" style="padding-top: 75px; overflow: hidden;">
        @{ Html.RenderAction("PrintOnShow", Model.PackinInstructionObject.Id); }
        @Html.HiddenFor(model => model.PackinInstructionObject.CreatorId)
    </div>
</div>
@*Prawy Panel*@
<div id="sidebar-wrapper-right2">
    <div class="row">
        <div class="col-12">
            <hr />
            <a class="btn btn-primary" href="@Url.Action("SavePDF", new { id = Model.PackinInstructionObject.Id })">
                <span class="icon fas fa-file-pdf"></span>
                <span class="caption">Pobierz PDF</span>
            </a>
            <a class="btn btn-default" href="@Url.Action("Edit", new { id = Model.PackinInstructionObject.Id })">
                <span class="icon fas fa-edit"></span>
                <span class="caption">Edytuj</span>
            </a>
            <hr />
            <a class="btn btn-default" style="float:left; max-width: 150px; width: 150px;" href="@Url.Action("Show", new { id = Model.PrevIntrId })">
                <span class="icon fas fa-arrow-alt-circle-left"></span>
                <span class="caption">Poprzednia</span>
            </a>
            @if (Model.NextIntrId > 0)
    {
        <a class="btn btn-default" style="float:left; max-width: 150px; width: 150px;" href="@Url.Action("Show", new { id = Model.NextIntrId })">
            <span class="caption">Następna</span>
            <span class="icon fas fa-arrow-alt-circle-right" style="float:right;"></span>
        </a>
}
else
{
        <button class="btn btn-secondary" style="float:left; max-width: 150px; width: 150px;">
            <span class="caption" disabled>Następna</span>
            <span class="icon fas fa-arrow-alt-circle-right" style="float:right;"></span>
        </button>
}
            <div style="clear: both;"></div>
            <hr />
            @*Akceptacje - Sprawdzenie*@
            <div class="@(((Model.IsUserAllowedToExamine)&& Model.PackinInstructionObject.Examined == false)? string.Empty : "hidden")" id="examinedForm">
                <h3>Sprawdzenie Instrukcji</h3>
                @using (Html.BeginForm("", "", FormMethod.Post, new { @id = "formExamineInstruction" }))
        {
            @Html.AntiForgeryToken()
            @Html.ValidationSummary(false, "", new { @class = "text-danger" })
            <div class="form-horizontal">
                @Html.HiddenFor(m => m.PackinInstructionObject.Id)
                <div class="form-group">
                    <div class="col-12">
                        Komentarz
                    </div>
                    <div class="col-12">
                        @Html.TextAreaFor(m => m.PackinInstructionObject.ExamineComment, new { @class = "form-control", @style = "max-width:640px", @rows = 4 })
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-12">
                        <div style="float:left; max-width: 150px; width: 150px;">
                            <div class="btn btn-success" style="width:100%;" id="btnExamineInstruction">
                                <span class="icon fas fa-check-circle"></span>
                                <span class="caption">Akceptuj</span>
                            </div>
                        </div>
                        <div style="float:left; max-width: 150px; width: 150px;">
                            <div class="btn btn-warning" style="width:100%;" id="btnRefuseExamineInstruction">
                                <span class="icon fas fa-times-circle"></span>
                                <span class="caption">Odrzuć</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
}
            </div>
            @*Akceptacje - Zatwierdzanie*@
            <div class="@(((Model.IsUserAllowedToConfirm) && Model.PackinInstructionObject.Confirmed == false && Model.PackinInstructionObject.Examined == true)? string.Empty : "hidden")" id="confirmedForm">
                <h3>Zatwierdzanie Instrukcji</h3>
                @using (Html.BeginForm("", "", FormMethod.Post, new { @id = "formConfirmInstruction" }))
        {
            @Html.AntiForgeryToken()
            @Html.ValidationSummary(false, "", new { @class = "text-danger" })
            <div class="form-horizontal">
                @Html.HiddenFor(m => m.PackinInstructionObject.Id)
                <div class="form-group">
                    <div class="col-12">
                        Komentarz
                    </div>
                    <div class="col-12">
                        @Html.TextAreaFor(m => m.PackinInstructionObject.ConfirmComment, new { @class = "form-control", @style = "max-width:640px", @rows = 4 })
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-12">
                        <div style="float:left; max-width: 150px; width: 150px;">
                            <div class="btn btn-success" style="width:100%;" id="btnConfirmInstruction">
                                <span class="icon fas fa-check-circle"></span>
                                <span class="caption">Akceptuj</span>
                            </div>
                        </div>
                        <div style="float:left; max-width: 150px; width: 150px;">
                            <div class="btn btn-warning" style="width:100%;" id="btnRefuseConfirmInstruction">
                                <span class="icon fas fa-times-circle"></span>
                                <span class="caption">Odrzuć</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
}
            </div>
            @*Poprawki - Zgłaszanie*@
            <div style="padding-bottom:15px;">
                <h3>Poprawki - Zgłaszanie</h3>
                @using (Html.BeginForm("", "", FormMethod.Post, new { @id = "formCorrectionInstruction" }))
            {
            @Html.AntiForgeryToken()
            @Html.ValidationSummary(false, "", new { @class = "text-danger" })
            <div class="form-horizontal">
                @Html.HiddenFor(model => model.PackinInstructionObject.Id)
                <div class="form-group">
                    <div class="col-12">
                        Uwagi do Instrukcji:
                    </div>
                    <div class="col-12">
                        @Html.TextAreaFor(m => m.Correction.CorrectionText, new { @class = "form-control", @style = "max-width:640px", @rows = 4 })
                    </div>
                </div>
                <div style="float:left; max-width: 300px; width: 300px;">
                    <div class="btn btn-info" style="width:100%;" id="btnCorrectionInstruction">
                        <span class="icon fas fa-check-circle"></span>
                        <span class="caption">Zgłoś</span>
                    </div>
                </div>
            </div>
            }
            </div>
            <hr />
            @*historia zmian*@
            <div>
                @if (Model.PackinInstructionObject != null)
            {
            <h3>Historia zmian</h3>
            foreach (MDL_BASE.Models.Base.ChangeLog cl in Model.ChangeLogs)
            {
                <div style="margin-top: 5px;">
                    <span style="color: dodgerblue; padding: 3px; font-weight: bold;">@(cl.User != null ? cl.User.FullName : "Imie Nazwisko")</span>
                    <span style="color: gray; padding: 3px;">@cl.Date</span>
                </div>
                <div>
                    <span style="color: darkslategrey; padding: 3px; font-weight: bold;">@((cl.FieldDisplayName != null && cl.FieldDisplayName.Length > 0) ? cl.FieldDisplayName : cl.FieldName):</span>
                    <span style="color: coral">@cl.OldValue</span>
                    ->
                    <span style="color: forestgreen; font-weight: bold;">@(cl.NewValue != null && cl.NewValue.Length > 0 ? cl.NewValue : "\"\"")</span>
                </div>
            }
            }
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">

    $("#btnExamineInstruction").click(function () {
        var data = $("#formExamineInstruction").serialize();
        ExaminePackingInstruction(data + "&PackinInstructionObject.Examined=true");
    });
    $("#btnRefuseExamineInstruction").click(function () {
        var data = $("#formExamineInstruction").serialize();
        ExaminePackingInstruction(data + "&PackinInstructionObject.Examined=false");
    });
    $("#btnConfirmInstruction").click(function () {
        var data = $("#formConfirmInstruction").serialize();
        ConfirmPackingInstruction(data + "&PackinInstructionObject.Confirmed=true");
    });
    $("#btnRefuseConfirmInstruction").click(function () {
        var data = $("#formConfirmInstruction").serialize();
        ConfirmPackingInstruction(data + "&PackinInstructionObject.Confirmed=false");
    });
    $("#btnCorrectionInstruction").click(function(){
        var data = $("#formCorrectionInstruction").serialize();
        AddCorrectionPackingInstruction(data);
    });

    function AddCorrectionPackingInstruction(data) {
        $.ajax({
            async: false, type: "POST", dataType: "json",
            data: data,
            url: "PFEP/PackingInstruction/AddCorrection",
            success: function (data) {
                $("#Correction_CorrectionText").val("");
            }
        });
    }
    function ExaminePackingInstruction(data) {
        $.ajax({
            async: false, type: "POST", dataType: "json",
            data: data,
            url: "PFEP/PackingInstruction/ExamineInstruction",
            success: function (data) {
                $("#PackinInstructionObject_ExamineComment").val("");
                if (data.Examined == false) {
                    $("#examinedDate").html("");
                } else {
                    $("#examinedDate").html(moment(data.ExaminedDate).format("YYYY-DD-MM"));
                    $("#examinedUser").html(data.Examiner.FullName);
                    $("#examinedForm").addClass("hidden");
                }
            }
        });
    }
    function ConfirmPackingInstruction(data) {
        console.log(data);
        $.ajax({
            async: false, type: "POST", dataType: "json",
            data: data,
            url: "PFEP/PackingInstruction/ConfirmInstruction",
            success: function (data) {
                $("#PackinInstructionObject_ConfirmComment").val("");
                if (data.Confirmed == false) {
                    $("#confirmedDate").html("");
                } else {
                    $("#confirmedDate").html(moment(data.ConfirmedDate).format("YYYY-DD-MM"));
                    $("#confirmedUser").html(data.Confirm.FullName);
                    $("#confirmedForm").addClass("hidden");
                }
            }
        });
    }
</script>

@{
    ViewBag.Title = "STOCK";
}

<style>
</style>

<div class="row no-gutters mb-2 hidden">
    <div class="col-12">
        <div class="formArea shadow">
            <form id="formQ">
                <div class="row">
                    <div class="col-6">
                        <textarea id="taImport" rows="1000" cols="2000" style="max-width: 1200px; overflow: scroll;"></textarea>
                    </div>
                    <div class="col-6">
                        <textarea id="taResults" rows="1000" cols="2000" style="max-width: 1200px;"></textarea>
                    </div>
                </div>


            </form>
        </div>
    </div>
</div>

<div class="row mt-3 pt-3" style="border-top: 1px solid lightgray;">
    <div class="col-3">
        <div class="btn btn-success" id="btnParse">Parse Data</div>
        <div class="btn btn-dark hidden" id="btnSaveItems">Save Items old</div>
        <div class="btn btn-dark" id="btnSaveItems2">Save Items</div>
        <div id="parse" class="mt-2">
            <textarea id="inventoryExcelData" rows="30" cols="500" style="max-width:100%;font-family: consolas;"></textarea>
        </div>
    </div>
    <div class="col-9" style="padding-left:15px;">
        <div id="InventoryDataGridInit" style="height: 400px;"></div>
        <div class="row">
            <div class="col-12">

            </div>
        </div>
    </div>
</div>


<script type="text/javascript">
    var InventoryDataGrid = function (gridDivSelector) {
        console.log("InventoryDataGridInit");
        GridBulkUpdate.call(this, gridDivSelector);
        var self = this;
        this.divSelector = gridDivSelector;
        
        this.gridHelper = new GridHelper("test", "/iLOGIS/undefined");
        this.gridHelper.SetFilter({ });
    };

    InventoryDataGrid.prototype = Object.create(GridBulkUpdate.prototype);
    InventoryDataGrid.prototype.constructor = InventoryDataGrid;

    InventoryDataGrid.prototype.InitGrid = function () {

        var grid = this;
        var _supplierId = this.supplierId;
        var _deliveryId = this.deliveryId;

        $(this.divSelector).jsGrid({
            width: "100%", height: "740px",
            bulkUpdate: false,
            inserting: true, editing: true, sorting: false,
            paging: false, pageLoading: false, pageSize: 20,
            confirmDeleting: false, filtering: false,
            fields: [
                { name: "LP", type: "text", width: 40, title: "L.P.", css: "", insertValue: function () { return _supplierId; }, insertTemplate: function () { return $("<td>"); } },
                { name: "dLocationName", type: "text", width: 40, title: "Location", css: "", insertValue: function () { return _supplierId; }, insertTemplate: function () { return $("<td>"); } },
                { name: "itemCode", type: "text", width: 40, title: "ItemCode", css: "", insertValue: function () { return _deliveryId; }, insertTemplate: function () { return $("<td>"); } },
                { name: "qty", type: "text", width: 40, title: "Qty", css: "", editing: false, fitlering: false, inserting: false },
                { name: "numberOfPackages", type: "text", title: "Pack. cout", width: 65, editing: true, filtering: false },
                { name: "maxQtyPerPackage", type: "text", title: "Max. qty/pack", width: 65, editing: true, filtering: false },
                { name: "maxPackagePerPallet", type: "text", title: "Max pack./pall.", width: 160, editing: true, filtering: false },
                { name: "status", type: "text", title: "Status", width: 160, editing: true, filtering: false },
                { name: "Akcje2", type: "control", width: 100, modeSwitchButton: true, editButton: true }
            ],
            controller: grid.gridHelper.DB,
            onDataLoaded: function () { }
            //rowClick: function (args) { }
        });
        this.grid = $(this.divSelector).data("JSGrid");
    };
    InventoryDataGrid.prototype.CreateNewGridInstance = function (divSelector) {
        return new InventoryDataGrid(divSelector);
    };
    InventoryDataGrid.prototype.RefreshGrid = function (filterData) {
        if (filterData != null) {
            this.gridHelper.SetFilter(filterData);
        }

        $(this.divSelector).jsGrid("loadData");
    };
</script>

<script type="text/javascript">

    var grid = new InventoryDataGrid("#InventoryDataGridInit");

    $(document).ready(function () {
        console.log("IMPORT.Ready");
        grid.InitGrid();
    });

    function readLink() {
        rows = $("#taImport").val().split("\n");

        for (let i = 0; i < rows.length; i++) {
            //console.log(rows[i]);
            //$("#taImport").val($("#taImport").val() + "1;");
            run(rows[i]);
        }
    }
    function run(link) {
        if (link.length > 2) {
            var JsonHelp = new JsonHelper();
            var ReturnJson = JsonHelp.GetData(link, {});
            ReturnJson.done(function (result) {
                console.log(link + ";" + result + ".");
            });
            ReturnJson.fail(function (result) {
                console.log(link + "; -1.");
            });
        }
    }

    $(document).on("click", "#btnParse", function () {
        //debugger;
        let text = $("#inventoryExcelData").val();
        let lines = text.split('\n');

        for (let i = 0; i < lines.length; i++) {
            let columns = lines[i].split('\t');

            if (columns[0].length > 0) {
                $("#InventoryDataGridInit").jsGrid("addCustomRow", {
                    LP: i+1,
                    dLocationName: columns[0],
                    itemCode: columns[1],
                    qty: columns[2],
                    numberOfPackages: columns[3],
                    maxQtyPerPackage: columns[4],
                    maxPackagePerPallet: columns[5],
                    status: -1
                });
            }
        }
    });

    $(document).on("click", "#btnSaveItems2", function () {
        console.log("grid");
        var grid = $("#InventoryDataGridInit").data("JSGrid");

        savingItemProblemsCount = 0;
        SaveInventoryItemRecurrent(grid, 0);
    });

    function SaveInventoryItemRecurrent(grid, i) {
        
        //debugger;
        if (i < grid.data.length) {
            let dt = {
                    dLocationName: grid.data[i].dLocationName,
                    itemCode: grid.data[i].itemCode,
                    qty: grid.data[i].qty,
                    numberOfPackages: grid.data[i].numberOfPackages,
                    maxQtyPerPackage: grid.data[i].maxQtyPerPackage,
                    maxPackagePerPallet: grid.data[i].maxPackagePerPallet,
                    type: 0
                }

            $.ajax({
                method: 'GET', dataType: "json", url: '/iLOGIS/StockUnit/ImportFromExcel',
                data: dt,
                success: function (iLogisStatus) {
                    console.log(iLogisStatus);
                    grid.data[i].status = iLogisStatus;

                    //if (grid.data[i].ArtNo == null || grid.data[i].ArtNo.length < 9) {
                    //    new Alert().Show("danger", "Article '" + artNo + "' not found!");
                    //    savingItemProblemsCount++;
                    //}

                    SaveInventoryItemRecurrent(grid, i + 1);
                },
                error: function (xhr, desc, err) {
                    console.log(err);
                    SaveInventoryItemRecurrent(grid, i + 1);
                    new Alert().Show("danger", "a problem occured during saving the item " + grid.data[i].LP);
                }
            });
        }
        else {
            grid.refresh();
            if (savingItemProblemsCount == 0) {
                new Alert().Show("success", "Saving Items Completed");
            }
            else {
                new Alert().Show("warning", "Saving Items Completed with some problems");
                new Alert().Show("info", "Not found codes was not saved! IT MEANS WILL BE MISSED ON OUTPUT FILE!");
            }
        }
    }

</script>

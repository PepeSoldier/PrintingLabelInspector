@model MDL_iLOGIS.ComponentWHDOC.ViewModels.WhDocumentAbstractViewModel
@using Microsoft.AspNet.Identity;

@{
    ViewBag.Title = "WZ " + Model.DocumentNumber;
    var Users = ViewBag.Users;
}

<style>
    .card {
        background-color: #569693 !important;
        border: 1px solid rgba(0,0,0,.125);
        border-radius: .25rem;
    }
</style>


<div class="col-10 pl-0 mb-3">
    <div class="card pt-1" style="max-width: 1060px; height:50px;">
        <div class="row" id="editMenu">
            <div class="col-1">
                <div class="btn btn-primary hidden" id="View">Podgląd</div>
                <div class="btn btn-default" id="Edit">Edytuj</div>
            </div>

            @if (Model.ApproverId == User.Identity.GetUserId() && Model.Status < MDL_iLOGIS.ComponentWHDOC.Enums.EnumWhDocumentStatus.approved)
            {

                <div class="col-2 offset-5" id="RefuseButton">
                    <div class="btn btn-danger btn-bottom w-100" onclick="SetStatus(false)">ODRZUĆ</div>
                </div>
                <div class="col-2" id="AcceptButton">
                    <div class="btn btn-success btn-bottom w-100" onclick="SetStatus(true)">ZATWIERDŹ</div>
                </div>
            }

            <div class="col-3 offset-2 hidden" id="ApproverListId">
                @Html.DropDownListFor(x => x.ApproverId, (IEnumerable<SelectListItem>)@Model.ApproverList, "Wybierz Zatwierdzającego", new { @class = "form-control" })
            </div>
            <div class="col-2 hidden" id="Save">
                <div class="btn btn-info">Zapisz</div>
            </div>
            <div class="col-1">
                <div class="btn btn-light" id="btnSignInit" data-id="@Model.Id">Podpisz</div>
            </div>
            <div class="col-1">
                <div class="btn btn-danger" id="btnPdf" data-id="@Model.Id"><i class="far fa-file-pdf pr-2"></i>PDF</div>
                <div class="btn btn-warning hidden" id="btnClearItems"><i class="fas fa-eraser pr-2"></i>Wyczyść</div>
            </div>
        </div>
        <div class="row justify-content-center hidden" id="viewMenu">
            <div class="col-12">
                Brak możliwości edycji / modyfikacji dokumentu
            </div>
        </div>
    </div>
</div>


<div id="WhDocumentWZ" style=" max-width: 1060px; max-height: 680px; background-color: white; border: 1px solid red; overflow: hidden;">

</div>

<script src="~/_ClientAppJS/MASTERDATA/ItemAutocomplete.js"></script>
<script type="text/javascript">

    var whDocument = new WhDocument();

    $(document).ready(function () {
        var model = @Html.Raw(Json.Encode(Model));
        if (model.EnableEditing) {
            ShowButtonToEdit();
        }
        whDocument.SetQrCode(model.QrCode);
        whDocument.Init(model);
    });

    function ShowButtonToEdit() {
        $("#Edit").removeClass("hidden");
    }

    $(document).on("click", "#btnSignInit", function () {
        let id = $(this).attr("data-id");
        whDocument.Issue(SignInit);
    });
    $(document).on("click", "#btnConfirmAndPrint", function () {
        if (!$(this).hasClass("disabled")) {
            ConfirmAndPrintHTML($(this).attr("data-id"));
        }
    });

    function SetStatus(isApproved) {
        let documentId = @Html.Raw(Json.Encode(Model.Id));

        jsonHelper = new JsonHelper();
        let approveJson = jsonHelper.GetPostData("/iLogis/WhDoc/Approve",
            {
                id: documentId,
                isApproved: isApproved
            });
        approveJson.done(function (jsonModel) {
            location.reload();
        })
    }
    function SignInit(id) {
        console.log("SignInit");
        OpenWindow();
        let sign = new JsonHelper().GetData("/CORE/Sign/Sign", { id });
        sign.done(function (signPage) {
            console.log("sign loaded");
            //$("#sign").html(signPage);
            wnd.Init("workorder", "Szczegóły Zlecenia", ClosePad);
            wnd.Show("<div style='max-height: 650px;'>" + signPage + "</div>");
        })
    };

     var wnd = {};
    function OpenWindow() {
        CloseSignPopup();
        wnd = new PopupWindow(1150, 200, 140, 280, false);
    };
    function CloseSignPopup() {
        if (wnd != null && wnd instanceof PopupWindow) {
            try {
                wnd.Close();
            }
            catch (ex) {
                console.log(ex);
            }
        }
    };
    function ConfirmAndPrintHTML(id) {
        let html = $("#WhDocumentWZ").html();
        let jsq = new JsonHelper().GetPostData("/iLogis/WhDoc/SignAndPrint", { id, html });
        jsq.done(function (jsonModel) {        
            new Alert().Show(jsonModel.MessageTypeString, jsonModel.Message);
            CloseSignPopup();
        });
    }
    function ConfirmAndPrint(id) {
        let jsq = new JsonHelper().GetPostData("/iLogis/WhDoc/WhDocumentConfirmAndPrint", { id });
        jsq.done(function (jsonModel) {        
            new Alert().Show(jsonModel.MessageTypeString, jsonModel.Message);

            CloseSignPopup();
        });
    }
    function ClosePad() {
        console.log("ClosePad");
        try {
            close_pad();
        }
        catch{
            console.log("unable to close pad");
        }
    }

</script>





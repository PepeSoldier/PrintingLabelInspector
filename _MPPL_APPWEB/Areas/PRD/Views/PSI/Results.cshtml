@using MDLX_CORE.ComponentCore.Entities;
@model MDL_PRD.ViewModel.PsiResultFormViewModel

@{
    ViewBag.Title = "PSI Raport";
}

<div id="PSI">
    <div class="row">
        <div class="col-12">
            <div class="formArea">
                @using (Html.BeginForm("", "", FormMethod.Post, new { id = "FormPSIResult" }))
                {
                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary(false, "", new { @class = "text-danger" })
                    <div class="form-horizontal">
                        <div class="formInlineGroup">
                            <div class="formInlineRow">
                                @Html.Label("Data od", htmlAttributes: new { @class = "control-label" })
                            </div>
                            <div class="formInlineRow">
                                @Html.TextBoxFor(model => model.SelectedDateFrom, "{0:yyyy-MM-dd}", new { @class = "form-control datepicker" })
                            </div>
                        </div>
                        <div class="formInlineGroup">
                            <div class="formInlineRow">
                                @Html.Label("Data do", htmlAttributes: new { @class = "control-label" })
                            </div>
                            <div class="formInlineRow">
                                @Html.TextBoxFor(model => model.SelectedDateTo, "{0:yyyy-MM-dd}", new { @class = "form-control datepicker" })
                            </div>
                        </div>
                        <div class="formInlineGroup">
                            <div class="formInlineRow">
                                @Html.Label("Linia", htmlAttributes: new { @class = "control-label" })
                            </div>
                            <div class="formInlineRow">
                                @Html.DropDownListFor(model => model.SelectedLine, Model.Lines, new { @class = "form-control" })
                            </div>
                        </div>
                        <div class="formInlineGroup">
                            <div class="formInlineRow">
                                @Html.Label("Zmiana", htmlAttributes: new { @class = "control-label" })
                            </div>
                            <div class="formInlineRow">
                                @Html.DropDownListFor(model => model.SelectedShift, Model.Shifts, new { @class = "form-control" })
                            </div>
                        </div>
                        <div class="formInlineGroup">
                            <div class="formInlineRow">
                                <b> </b>
                            </div>
                            <div class="formInlineRow">
                                <div class="btn btn-default" id="FormPSIResultSubmit">Odśwież</div>
                            </div>
                        </div>
                    </div>
                }
                <div class="clear_div"></div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-12">
            <div id="chartPSIResults" style="max-width: 1000px;">
                <canvas id="chartTop10"></canvas>
            </div>
        </div>
    </div>
    <hr />
    <div class="row">
        <div class="col-12">
            <div class="Result">
                <div class="ResultTitle">P1</div>
                <div class="ResultValue" id="ResultP1"></div>
            </div>
            <div class="Result">
                <div class="ResultTitle">P2</div>
                <div class="ResultValue" id="ResultP2"></div>
            </div>
            <div class="Result">
                <div class="ResultTitle">P3</div>
                <div class="ResultValue" id="ResultP3"></div>
            </div>
            <div class="Result">
                <div class="ResultTitle">PSI</div>
                <div class="ResultValue" id="ResultPSI"></div>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">

    $(document).ready(function () {
    });

    $(document).on("click", "#FormPSIResultSubmit", function () {
        var db = GetResultsJson();

        $("#ResultP1").text(db.DSA);
        $("#ResultP2").text(db.SeqCnt);
        $("#ResultP3").text(db.SeqSum);
        $("#ResultPSI").text(db.PSI);

        RefreshChart(db.ChartJsData);
        //console.log(db.ChartJsData);
    });

    function ClearChart() {
        console.log("clear");
        $("#chartPSIResults").html("");
        $('#chartPSIResults').append('<canvas id="chartTop10"></canvas>');
    }

    function GetResultsJson() {
        var line = $("#SelectedLine").val() > 0 ? $("#SelectedLine").val() : "";
        var shift = $("#SelectedShift").val();

        console.log(line);
        console.log(shift);

        return (function () {
            var json = null;
            $.ajax({
                'async': false,
                'global': false,
                'url': "/PRD/PSI/ResultsCalc?"
                    + "dateFrom=" + $("#SelectedDateFrom").val()
                    + "&dateTo=" + $("#SelectedDateTo").val()
                    + "&shift=" + shift
                    + "&line=" + line,
                'dataType': "json",
                'success': function (data) { json = data; }
            });
            return json;
        })();
    }

    function RefreshChart(data) {
        ClearChart();
        //var ctx = document.getElementById("chartTop10").getContext('2d');
        var myChart = new Chart('chartTop10', {
            type: 'horizontalBar',
            data: {
                labels: data.Labels,
                datasets: [{
                    label: data.Label,
                    data: data.Data,
                    backgroundColor: [
                        'rgba(255, 99, 132, 0.2)',
                        'rgba(54, 162, 235, 0.2)',
                        'rgba(255, 206, 86, 0.2)',
                        'rgba(75, 192, 192, 0.2)',
                        'rgba(153, 102, 255, 0.2)',
                        'rgba(255, 159, 64, 0.2)'
                    ],
                    borderColor: [
                        'rgba(255, 99, 132, 1)',
                        'rgba(54, 162, 235, 1)',
                        'rgba(255, 206, 86, 1)',
                        'rgba(75, 192, 192, 1)',
                        'rgba(153, 102, 255, 1)',
                        'rgba(255, 159, 64, 1)'
                    ],
                    borderWidth: 1
                }]
            },
            options: {
                plugins: {
                    datalabels: {
                        anchor: 'center',
                        align: 'center',
                        color: function (context) {
                            console.log(context.dataset.borderColor[context.dataIndex]);
                            return context.dataset.borderColor[context.dataIndex];
                        },
                        //display: function (context) {
                        //    return context.dataset.data[context.dataIndex] > 15;
                        //},
                        font: {
                            weight: 'bold', size: 28
                        },
                        formatter: Math.round
                    }
                },
                scales: {
                    yAxes: [{ ticks: { beginAtZero: true } }],
                    xAxes: [{ ticks: { beginAtZero: true } }]
                }
            }
        });
    }


</script>
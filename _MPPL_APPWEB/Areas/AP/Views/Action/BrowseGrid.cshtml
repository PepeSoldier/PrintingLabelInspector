@model _MPPL_WEB_START.Areas.AP.ViewModel.ActionBrowsenewViewModel
@using GridMvc.Html

@{
    Layout = null;
    string class1 = string.Empty;
}

<div class="row" style="margin-top: 15px;">
    <div class="col-sm-12">
        @{
            string counts = "";
        }
        @foreach (MDL_AP.Models.ActionPlan.ActionState as1 in Model.ActionStates)
        {
            counts += @as1.Count.ToString() + "-";
        }

        <div id="statusesCount" style="display: none;">
            !@counts!
        </div>

    @Html.Grid(Model.ActionModels).Columns(columns =>
    {

    columns.Add().Titled("<span class='col-sm-12'>Właściciel</span><span class='col-sm-12'>Data Utworzenia</span>").Encoded(false).Sanitized(false).SetWidth(200).RenderValueAs(u =>
                @<div class="row">

                @if ((u.State != MDL_AP.Models.ActionPlan.ActionStateEnum.stateAct && u.PlannedEndDate.Date < DateTime.Now.Date))
                {
                    class1 = "ActionDelayed";
                }
                else if ((u.State == MDL_AP.Models.ActionPlan.ActionStateEnum.stateAct))
                {
                    class1 = "ActionFinished";
                }
                else
                {
                    class1 = "ActionNormal";
                }

                <div class="col-sm-12">
                    <div style="margin-left: -5px;" class="class1 @class1">
                        <div class="row upperRow">
                            <div class="col-sm-12 ActionCreator">@u.Creator.FullName</div>
                        </div>
                        <div class="row">
                            <div class="col-sm-12 ActionDateCreated">@u.DateCreated.ToShortDateString()</div>
                        </div>
                    </div>
                </div>
            </div>
    );

    columns.Add().Titled("<span class='col-sm-8'>Tytuł</span><span class='col-sm-4'>Typ</span><span class='col-sm-4'>Obszar</span><span class='col-sm-2'>Stan.</span><span class='col-sm-2'>Zmiana</span><span class='col-sm-4'>Kategoria</span>")
            .Encoded(false).Sanitized(false).SetWidth(400).RenderValueAs(u =>
            @<div>
                <div class="row upperRow">

                    <div class="col-sm-8 ActionTitle">@u.Title</div>
                    <div class="col-sm-4 ActionType">@u.Type.Name</div>
                </div>
                <div class="row">
                    <div class="col-sm-4 ActionArea">@u.Area.Name</div>
                    <div class="col-sm-2 ActionWorkstation">@u.Workstation.Name</div>
                    <div class="col-sm-2 ActionShiftCode">@u.ShiftCode.Name</div>
                    <div class="col-sm-4 actionCategory">@u.Category.Name</div>
                </div>
            </div>
    );

    columns.Add().Titled("<span class='col-sm-12'>Odpowiedzialny/a</span><span class='col-sm-6'>Termin</span><span class='col-sm-6'>Dział</span>")
            .Encoded(false).Sanitized(false).SetWidth(200).RenderValueAs(u =>
            @<div>
                <div class="row upperRow">
                    <div class="col-sm-12 ActionAssigned">@((u.Assigned != null) ? u.Assigned.FullName : "N/A")</div>
                </div>
                <div class="row">
                    <div class="col-sm-6 ActionPlannedEndDate">@u.PlannedEndDate.ToShortDateString()</div>
                    <div class="col-sm-6 ActionDepartment">@(u.Department != null ? u.Department.Name : string.Empty)</div>
                </div>
            </div>
    );
    columns.Add().Titled("Podakcje").Encoded(false).Sanitized(false).SetWidth(60).RenderValueAs(u =>
    @<div>
        <div class="row upperRow">
            <div class="col-sm-12 subactionsCount">
                @u.SubactionsCount
            </div>
            <div class="col-sm-12 subactionsShow">
                @if (u.SubactionsCount > 0)
                {
                <span class="fa fa-plus-square-o" id="SubactionsShow_@u.Id"></span>
                }
            </div>
        </div>
    </div>
    );
    columns.Add().Titled("Status").Encoded(false).Sanitized(false).SetWidth(80).RenderValueAs(u =>
    @<div>
        <div class="row upperRow">
            <div class="col-sm-12 statePicture">
                <img src="~/Content/Images/state@((int)u.State).png" />
            </div>
        </div>
    </div>
    );

    columns.Add().Titled("").Encoded(false).Sanitized(false).SetWidth(80).RenderValueAs(u =>
    @<div>
        <div class="row upperRow">
            <div class="col-sm-12 ActionLink">
                @Html.ActionLink("Otwórz", "Show", new { id = u.Id })
            </div>
        </div>
    </div>
    );

    })

    </div>

</div>

@*PAGINATOR*@
<div class="row">
    <div class="col-md-12">
        @{ 
            int pages = (int)(Model.TotalRows / Model.RowsOnPage) + ((Model.TotalRows % Model.RowsOnPage > 0)? 1 : 0);
            int limit = 6;
        }
        <ul class="pagination gridpaginer">
            @for (int i = 1; i <= pages; i++)
            {
                //add pages meets the conditions
                if ((i > Model.CurrentPage - limit * 0.5 && i <= Model.CurrentPage) ||
                    (i < Model.CurrentPage + limit * 0.5 && i >= Model.CurrentPage) ||
                    (i == pages) ||
                    (i == 1)
                   )
                {
                    <li class="@(Model.CurrentPage == i? "active" : "")"><a href="#">@i</a></li>
                }

                
                //add last page to list
                if (Model.CurrentPage < pages - limit * 0.5 - 1 && i == (pages - 1))
                {
                    <li class="@(Model.CurrentPage == i? "active" : "")"><a href="#">...</a></li>
                }

                //add first page to list
                if (Model.CurrentPage > 0 + limit * 0.5 && i == 1)
                {
                    <li class="@(Model.CurrentPage == i? "active" : "")"><a href="#">...</a></li>
                }
            }
        </ul>
    </div>
</div>
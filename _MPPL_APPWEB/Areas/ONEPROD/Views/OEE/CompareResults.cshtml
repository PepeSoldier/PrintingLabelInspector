@model MDL_ONEPROD.ComponentOEE.ViewModels.FilterOeeViewModel
@using XLIB_COMMON.Enums;
@using MDL_ONEPROD.Model.Scheduling;

<style>
    .WindowBox {
        border: 0 !important;
    }

    .shadow, .grid-mvc, .darkSkin .Window, .darkSkin .WindowJs, .defaultSkin .Window, .defaultSkin .WindowJs {
        -webkit-box-shadow: none !important;
        -moz-box-shadow: none !important;
        box-shadow: none !important;
    }
</style>



<div class="row">
    <div class="col-12">
        <div class="formArea shadow">
            <div class="formInlineGroup">
                <div class="formInlineRow">
                    <label>Wybierz Maszynę</label>
                </div>
                <div class="formInlineRow">
                    @HtmlMppl.DropDownOneprodManyMachines("MachineId", ((List<ResourceOP>)Model.MachineList), "Id", "Name", "ResourceGroupOP.Name", 1)
                </div>
            </div>
            <div class="formInlineGroup hidden" id="ReasonSelector">
                <div class="formInlineRow">
                    <label>Wybierz Powód</label>
                </div>
                <div class="formInlineRow">
                    <select id="ReasonId" class="form-control" style="width: 210px;">
                        <option value="-1"></option>
                    </select>
                </div>
            </div>
            <div class="formInlineGroup">
                <div class="formInlineRow">
                    <label>Wybierz Tryb</label>
                </div>
                <div class="formInlineRow">
                    <div class="btn-group btn-group-toggle" data-toggle="buttons" id="modeSwitcher">
                        <label class="option option1 btn btn-default">
                            <input type="radio" name="options" id="option1" autocomplete="off" checked> Od - Do
                        </label>
                        <label class="option option2 btn btn-default active">
                            <input type="radio" name="options" id="option2" autocomplete="off"> Tydzień
                        </label>
                        <label class="option option3 btn btn-default">
                            <input type="radio" name="options" id="option3" autocomplete="off"> Zmiana
                        </label>
                    </div>
                </div>
            </div>
            <div class="formInlineGroup groupoption1 hidden">
                <div class="formInlineRow">
                    <label>Wybierz Datę Od</label>
                </div>
                <div class="formInlineRow">
                    @Html.TextBox("SelectedDateFrom", System.DateTime.Now.Date.AddHours(-18), "{0:yyyy-MM-dd HH:mm}", new { @class = "form-control datetimepicker", @autocomplete = "off" })
                </div>
            </div>
            <div class="formInlineGroup groupoption1 hidden">
                <div class="formInlineRow">
                    <label>Wybierz Datę Do</label>
                </div>
                <div class="formInlineRow">
                    @Html.TextBox("SelectedDateTo", System.DateTime.Now.Date.AddHours(6), "{0:yyyy-MM-dd HH:mm}", new { @class = "form-control datetimepicker", @autocomplete = "off" })
                </div>
            </div>


            <div class="formInlineGroup groupoption3 hidden">
                <div class="formInlineRow">
                    <label>Wybierz Datę</label>
                </div>
                <div class="formInlineRow">
                    @Html.TextBox("SelectedDate", System.DateTime.Now, "{0:yyyy-MM-dd}", new { @class = "form-control datetimepicker2", @autocomplete = "off" })
                </div>
            </div>
            <div class="formInlineGroup groupoption3 hidden">
                <div class="formInlineRow">
                    <label>Wybierz Zmianę</label>
                </div>
                <div class="formInlineRow">
                    @Html.DropDownList("SelectedShift", EnumHelper.GetSelectList(typeof(Shift)), null, new { @class = "form-control", @value = 1 })
                </div>
            </div>
            <div class="formInlineGroup groupoption2 ">
                <div class="formInlineRow">
                    <label>Wybierz tydzień</label>
                </div>
                <div class="formInlineRow">
                    <div class="align-items-center" id="example1"></div>
                </div>
            </div>
            <div class="formInlineGroup groupoption1 groupoption2">
                <div class="formInlineRow">
                    <label>Wybierz interwał</label>
                </div>
                <div class="formInlineRow">
                    <select id="intervalInHours" class="form-control">
                        <option id="optionShift" value="8">Zmianowo</option>
                        <option id="optionDay" value="24" selected>Dziennie</option>
                        <option id="optionWeek" value="168">Tygodniowo</option>
                        <option id="optionMonth" value="744">Miesięcznie</option>
                    </select>
                </div>
            </div>
            <div class="formInlineGroup">
                <div class="formInlineRow">
                    <label>Wybierz Brygadę</label>
                </div>
                <div class="formInlineRow">
                    @Html.DropDownList("LabourBrigadeId", (SelectList)Model.LabourBrigades, null, new { @class = "form-control selectpicker" , multiple = "" })
                </div>
            </div>
            <div class="formInlineGroup">
                <div class="formInlineRow">
                    <label>Wybierz Język</label>
                </div>
                <div class="formInlineRow">
                    <select id="LanguageId" class="form-control" style="width: 210px;">
                        <option value="1" selected>Polski</option>
                        <option value="2">English</option>
                    </select>
                </div>
            </div>
            <div class="formInlineGroup">
                <div class="formInlineRow">
                </div>
                <div class="formInlineRow">
                    <input type="button" class="btn btn-success" value="Start" id="btnRefresh" />
                </div>
            </div>

            <div class="formInlineGroup" style="margin-left: 15px;">
                <div class="formInlineRow">
                </div>
                <div class="formInlineRow">
                    <div id="btnShare" class="btn btn-default" style="font-weight:100 !important;">
                        <i class="fas fa-share-alt"></i>
                    </div>
                </div>
            </div>


            <div class="formInlineGroup" style="float:right">
                <div class="formInlineRow">
                </div>
                <div class="formInlineRow">
                    <input type="button" class="btn btn-info hidden" value="Dashboard" id="btnDashboard" />
                    <input type="button" class="btn btn-info" value="Przeglądanie" id="btnBrowse" />
                    <input type="button" class="btn btn-info" value="Wykresy" id="btnMachineDetails" />
                    <input type="button" class="btn btn-info" value="Analiza" id="btnReasonDetails" />
                </div>
            </div>
            <div style="clear: both;"></div>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-12">
        <div id="contentBox" style="min-width:1800px;"></div>
    </div>
</div>
<style>
    .bootstrap-datetimepicker-widget table td.cw {
        color: #007bff;
    }
    .weekpickerArrow {
        float: left;
    }
</style>
<script src="~/_ClientAppJS/MyScripts.js"></script>
<script src="~/_ClientAppJS/ExternalLibraries/ChartJS/Chart.js"></script>
<script src="~/_ClientAppJS/ExternalLibraries/Gauge/raphael-2.1.4.min.js"></script>
<script src="~/_ClientAppJS/ExternalLibraries/Gauge/justgage.js"></script>
<script src="~/_ClientAppJS/ExternalLibraries/ChartJS/chartjs-plugin-datalabels.min.js"></script>

<script type="text/javascript">
    $(document).ready(function () {
        InitDatepickers();
        weekpicker1.Init();
        //Refresh_ReadLinkHash();
    });

    var weekpicker1 = new WeekPicker("#example1", "weekPicker");
    var filters = { dateFrom: '2019-01-01 6:00', dateTo: '2019-01-01 14:00', machineIds: [], labourBrigadeIds: [], intervalInHours: 24 };
    var reports = [
        { date: "2018-10-31", shifts: [1, 2, 3] },
        { date: "2018-11-02", shifts: [2, 3] },
        { date: "2018-11-03", shifts: [1] },
        { date: "2018-11-05", shifts: [1, 2, 3] },
        { date: "2018-11-06", shifts: [1, 2, 3] }
    ]

    $(document).on("click", ".goToDetails", function () {
        var mId = $(this).attr("data-machineId");
        location.href = location.href.split('#')[0] + "#";
        location.href += "machinedetails";

        $('select[name=MachineId]').val(mId);
        $('.selectpicker').selectpicker('refresh');

        RefreshMachineDetails();
    });
    $("#modeSwitcher").on("click", ".btn", function () {
        var Id = $(this).find("input")[0].id;
        ShowOptionGroup(Id);
    });
    $("#btnDashboard").on("click", function () {
        location.href = location.href.split('#')[0] + "#";
        location.href += "dashboard";
        Refresh_ReadLinkHash();
    });
    $("#btnBrowse").on("click", function () {
        location.href = location.href.split('#')[0] + "#";
        location.href += "browse";
        Refresh_ReadLinkHash();
    });
    $("#btnMachineDetails").on("click", function () {
        location.href = location.href.split('#')[0] + "#";
        location.href += "machinedetails";
        Refresh_ReadLinkHash()
    });
    $("#btnReasonDetails").on("click", function () {
        location.href = location.href.split('#')[0] + "#";
        location.href += "reasondetails";
        Refresh_ReadLinkHash()
    });
    $("#btnRefresh").click(function () {
        GetComparedResults();
    });
    $("#btnShare").click(function () {
        ReadFormParameters();
    });

    function ShowOptionGroup(Id) {
        var options = ["option1", "option2", "option3"];

        for (i = 0; i < options.length; i++) {
            $(".group" + options[i]).addClass("hidden");
        }
        for (i = 0; i < options.length; i++) {
            if (options[i] == Id) {
                $(".group" + options[i]).removeClass("hidden");
            }
        }
    }

    function ReadManyFilters(startDay) {
        var option = $("#modeSwitcher").find(".btn.active").find("input").attr("id");

        var machineIds = [];
        var selectMachines = $('#MachineId')[0].selectedOptions;
        $.each(selectMachines,function(index,value){
            machineIds.push(parseInt(value.value));
        })

        var labBrigadeIds = [];
        var selectLabBrigades =$("#LabourBrigadeId")[0].selectedOptions;
        $.each(selectLabBrigades,function(index,value){
            labBrigadeIds.push(parseInt(value.value));
        })

        filters.machineIds = machineIds;
        filters.intervalInHours = $("#intervalInHours").val();
        filters.reasonId = $("#ReasonId").val();
        filters.languageId = $("#LanguageId").val();
        filters.labourBrigadeIds = labBrigadeIds;

        if (option == "option2") {
            console.log("option2 - week picker");
            if (startDay == null) {
                //parameter coming from resourceGroup model. e.g: press liness has start day Saturday
                startDay = $("#MachineId")[0].selectedOptions[0].attributes["data-startDay"].value;
            }
            var startDayShift = (8 - startDay >= 7) ? 0 : 8 - startDay;
            var dateFrom = weekpicker1.getWeekStartDate().subtract(startDayShift, "days");
            var dateTo = weekpicker1.getWeekEndDate().subtract(startDayShift, "days");
            var dateShiftEnd = CalcEndShiftTime();

            dateTo = (dateTo > dateShiftEnd) ? dateShiftEnd : dateTo;
            filters.dateFrom = dateFrom.format('YYYY-MM-DD HH:mm');
            filters.dateTo = dateTo.format('YYYY-MM-DD HH:mm');
        }
        else if (option == "option1") {
            console.log("option1 - date picker");
            filters.dateFrom = $("#SelectedDateFrom").val();
            filters.dateTo = $("#SelectedDateTo").val()
        }
        else {
            console.log("option3 - shift picker");
            var whp = new WorkingHoursPreview("#SelectedDate", "#SelectedShift");
            var hours = whp.CalculateStartAndEndDate();
            filters.dateFrom = hours.dateFrom;
            filters.dateTo = hours.dateTo;
            filters.intervalInHours = 8;
        }

        console.log(filters);
        filters.reasonTypeId = -1;
    }
   
    function CalcEndShiftTime() {
        var today = new Date();
        var hour = today.getHours();
        today.setHours(hour + 2);
        hour = today.getHours();
        var shiftEndHour = hour < 8 ? 6 : hour < 16 ? 14 : 22;

        today.setSeconds(0); today.setMinutes(0); today.setMilliseconds(0);
        today.setHours(shiftEndHour - 8);
        return new moment(today);
    }
    function Refresh_ReadLinkHash() {
        RefreshDashboard();
    }

    function ReadFormParameters() {
        //PutFormParameters('SelectedDate=2018-12-06&SelectedShift=1&MachineId=1&modeSwitcher=3');
        var formParams = "form-";
        var option = $("#modeSwitcher").find(".active").find("input")[0].id;

        formParams += "MachineId=" + $("#MachineId").val();
        formParams += "$modeSwitcher=" + option.replace("option", "");

        if (option == "option1") {
            formParams += "&SelectedDateFrom=" + $("#SelectedDateFrom").val();
            formParams += "&SelectedDateTo=" + $("#SelectedDateTo").val();
            formParams += "&intervalInHours=" + $("#intervalInHours").val();
        }
        else if (option == "option2") {
            formParams += "&weekPicker=" + $("#weekPicker").val();
            formParams += "&intervalInHours=" + $("#intervalInHours").val();
        }
        else {
            formParams += "&SelectedDate=" + $("#SelectedDate").val();
            formParams += "&SelectedShift=" + $("#SelectedShift").val();
        }

        console.log(formParams);
    }
    function PutFormParameters(data1) {
        console.log(data1);
        if (data1.length > 1) {
            var hashParams = data1.split('&'); // substr(1) to remove the `#`
            for (var i = 0; i < hashParams.length; i++) {
                var p = hashParams[i].split('=');

                if (p[0] == "modeSwitcher") {
                    $("#modeSwitcher").find(".option").removeClass("active");
                    $("#modeSwitcher").find(".option" + p[1]).addClass("active");
                    ShowOptionGroup("option" + p[1]);
                }
                else if (p[0] == "MachineId") {
                    $('select[name=MachineId]').val(p[1]);
                    $('.selectpicker').selectpicker('refresh');
                }
                else {
                    document.getElementById(p[0]).value = decodeURIComponent(p[1]);
                }
            }
        }
    }

    function GetComparedResults() {
        ReadManyFilters();
        $.ajax({
            type: "GET",
            traditional: true,
            url: "/ONEPROD/OEEDashboard/ComparedResults",
            data: filters,
            success: function (data) {
                $("#contentBox").html(data);
            }
        });
    }

    //function RefreshBrowse() {
    //    ShowMachineSelector(false);
    //    ShowReasonSelector(false);
    //    $("#contentBox").html(ShowLoadingSnippet());
    //    ReadFilters();
    //    $.get("/ONEPROD/OEEBrowse/Index", filters, function (data) {
    //        $("#contentBox").html(data);
    //    });
    //}
    //function RefreshMachineDetails() {
    //   // ShowMachineSelector(false);
    //    ShowReasonSelector(false);
    //    console.log("btnMachineDetails wyczyść");
    //    $("#contentBox").html(ShowLoadingSnippet());
    //    ReadFilters();
    //    $.get("/ONEPROD/OEEDashboard/MachineDetails", filters, function (data) {
    //        $("#contentBox").html(data);
    //    });
    //}
    //function RefreshReasonDetails() {
    //    ShowMachineSelector(true);
    //    ShowReasonSelector(true);
    //    console.log("btnReasonDetails wyczyść");
    //    $("#contentBox").html(ShowLoadingSnippet());
    //    ReadFilters();
    //    $.get("/ONEPROD/OEEDashboard/ReasonDetails", filters, function (data) {
    //        $("#contentBox").html(data);
    //        if ($("#ReasonId").find("option").length < 2) {
    //            RefreshReasonSelector();
    //        }
    //    });
    //}

    function ShowMachineSelector(isOn) {
        if (isOn == true) {
            $(".btn.dropdown-toggle.btn-info").attr("disabled", true);
            $(".btn.dropdown-toggle.btn-info").addClass("btn-default");
            $(".btn.dropdown-toggle.btn-info").removeClass("btn-info");
        }
        else {
            $(".btn.dropdown-toggle.btn-default").attr("disabled", false);
            $(".btn.dropdown-toggle.btn-default").addClass("btn-info");
            $(".btn.dropdown-toggle.btn-default").removeClass("btn-default");
        }
    }
    function ShowReasonSelector(isOn) {
        if (isOn == false) {
            $("#ReasonSelector").addClass("hidden");
        }
        else {
            $("#ReasonSelector").removeClass("hidden");
        }
    }

    $(".datetimepicker2").datetimepicker({
        i18n: {
            pl: {
                months: [
                    'Styczeń', 'Luty', 'Marzec', 'Kwiecień',
                    'Maj', 'Czerwiec', 'Lipiec', 'Sierpień',
                    'Wrzesień', 'Październik', 'Listopad', 'Grudzień',
                ],
                dayOfWeek: [
                    "Nd", "Pn", "Wt", "Śr", "Cz",
                    "Pt", "Sb",
                ]
            }
        },
        dayOfWeekStart: 1,
        timepicker: false,
        allowTimes: ['06:00', '14:00', '22:00'],
        format: 'Y-m-d',
        onGenerate: function (current_time, $input) {

            $(this).find(".xdsoft_date").each(function (index) {
                var month = parseInt($(this).attr('data-month')) + 1;
                var day = parseInt($(this).attr('data-date'));
                var monthStr = month > 9 ? month.toString() : "0" + month;
                var dayStr = day > 9 ? day.toString() : "0" + day;
                var thisDate = $(this).attr('data-year') + "-" + monthStr + "-" + dayStr;


                var report = reports.find(x => x.date == thisDate);

                if (moment(thisDate) < moment()) {
                    if (report != null && report.shifts.length > 0) {
                        if (report.shifts.length == 3)
                            $(this).css("background-color", "#a9dba0");
                        else
                            $(this).css("background-color", "#eae498");
                    }
                    else {
                        $(this).css("background-color", "rgb(237,208,208)");
                    }
                }
            });
        }
    });
    $(".datetimepicker").datetimepicker({
        allowTimes: ['00:00', '06:00', '14:00', '22:00']
    });

</script>


